{"version":3,"file":"static/js/764.2b52896e.chunk.js","mappings":"6PAOMA,EAAS,WAAO,IAAD,EACnB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BC,EAAAA,EAAAA,MAA5B,eAAOC,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAU,UAAGJ,EAAOK,IAAI,qBAAd,QAA+B,GACzCC,EAAqB,mCAAG,gHAEAC,EAAAA,EAAAA,IAAeH,GAFf,mBAElBI,EAFkB,EAElBA,QACRV,EAAUU,GACa,IAAnBA,EAAQC,OAJc,iCAKXC,QAAQC,OAAO,IAAIC,MAAJ,YAAeR,EAAf,QALJ,kGAQ1BS,QAAQC,IAAR,MAR0B,0DAAH,sDAY3BC,EAAAA,EAAAA,YACE,WACET,GACD,GAED,IAQF,OACE,iCACE,uBAAG,uBACH,kBAAMU,SARW,SAAAC,GACnBA,EAAEC,iBACFZ,GACD,EAKG,WACE,kBACEa,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,cACZC,MAAOnB,EACPoB,SAAU,SAAAC,GAAG,OAAIxB,EAAU,CAAEG,WAAYqB,EAAIC,OAAOH,OAAvC,KAEf,mBAAQJ,KAAK,SAASQ,QAAS,kBAAM,IAAN,EAA/B,UACE,0BAAM,gBAGT9B,IACC,wBACGA,EAAO+B,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAM/B,GAAxC,SACG2B,EAAMK,SAFFL,EAAME,GADA,QAW1B,EAEDpC,EAAOwC,WAAa,CAClBD,MAAOE,IAAAA,OAAAA,WACPL,GAAIK,IAAAA,OAAAA,YAGN,W,yLCzEMC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAgB,mCAAG,+GAELL,EAAShC,IAAT,oBAFK,uBAEpBsC,EAFoB,EAEpBA,KAFoB,kBAGrBA,GAHqB,gCAK5B9B,QAAQC,IAAR,MAL4B,yDAAH,qDAShBP,EAAc,mCAAG,WAAMP,GAAN,yFACLqC,EAAShC,IAAT,eAA6B,CAClDmC,OAAQ,CACNI,MAAM,GAAD,OAAK5C,MAHc,uBACpB2C,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,sDASdE,EAAY,mCAAG,WAAMd,GAAN,kGAEDM,EAAShC,IAAT,iBAAuB0B,IAFtB,uBAEhBY,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,gCAKxB9B,QAAQC,IAAR,MALwB,yDAAH,sDASZgC,EAAgB,mCAAG,WAAMf,GAAN,kGAELM,EAAShC,IAAT,iBAAuB0B,EAAvB,aAFK,uBAEpBY,EAFoB,EAEpBA,KAFoB,kBAGrBA,GAHqB,gCAK5B9B,QAAQC,IAAR,MAL4B,yDAAH,sDAShBiC,EAAkB,mCAAG,WAAMhB,GAAN,kGAEPM,EAAShC,IAAT,iBAAuB0B,EAAvB,aAFO,uBAEtBY,EAFsB,EAEtBA,KAFsB,kBAGvBA,GAHuB,gCAK9B9B,QAAQC,IAAR,MAL8B,yDAAH,qD","sources":["pages/Movies.js","servises/Api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { getSearchMovie } from '../servises/Api';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'react-router-dom';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [search, setSearch] = useSearchParams();\n\n  const location = useLocation();\n\n  const movieQuery = search.get('movieQuery') ?? '';\n  const getSearchMoviebyQuery = async () => {\n    try {\n      const { results } = await getSearchMovie(movieQuery);\n      setMovies(results);\n      if (results.length === 0) {\n        return await Promise.reject(new Error(`\" ${movieQuery} \"`));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(\n    () => {\n      getSearchMoviebyQuery();\n    },\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    getSearchMoviebyQuery();\n  };\n\n  return (\n    <>\n      <p>Enter movie title</p>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Enter movie\"\n          value={movieQuery}\n          onChange={evt => setSearch({ movieQuery: evt.target.value })}\n        />\n        <button type=\"submit\" onClick={() => null}>\n          <span>Search</span>\n        </button>\n      </form>\n      {movies && (\n        <ul>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nMovies.protoTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'af7806c242ad95763370aa39444155c5',\n  },\n});\n\nexport const getTrendingMovie = async () => {\n  try {\n    const { data } = await instance.get(`trending/all/day`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getSearchMovie = async search => {\n  const { data } = await instance.get(`search/movie`, {\n    params: {\n      query: `${search}`,\n    },\n  });\n  return data;\n};\n\nexport const getMovieById = async id => {\n  try {\n    const { data } = await instance.get(`/movie/${id}`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieCastById = async id => {\n  try {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieReviewById = async id => {\n  try {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["Movies","useState","movies","setMovies","useSearchParams","search","setSearch","location","useLocation","movieQuery","get","getSearchMoviebyQuery","getSearchMovie","results","length","Promise","reject","Error","console","log","useEffect","onSubmit","e","preventDefault","type","autoComplete","autoFocus","placeholder","value","onChange","evt","target","onClick","map","movie","to","id","state","from","title","protoTypes","PropTypes","instance","axios","baseURL","params","api_key","getTrendingMovie","data","query","getMovieById","getMovieCastById","getMovieReviewById"],"sourceRoot":""}