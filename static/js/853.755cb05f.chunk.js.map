{"version":3,"file":"static/js/853.755cb05f.chunk.js","mappings":"mPAMMA,EAAS,WACb,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAW,mCAAG,8GAEGC,EAAAA,EAAAA,IAAmBJ,GAFtB,OAEVK,EAFU,OAGhBV,EAAUU,EAAKC,SACfT,GAAW,GAJK,gDAMhBE,EAAS,EAAD,IANQ,yBAQhBF,GAAW,GARK,4EAAH,qDAWjBM,GAZC,CAaF,GAAE,CAACH,KAGF,gCACqB,IAAlBN,EAAOa,SACN,iCACE,uBAAG,4CACH,gBACEC,IAAI,uBACJC,IAAI,iBACJC,MAAO,SAIZhB,IACC,wBACGA,EAAOiB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,+BACE,yBACE,4BACE,yBAAG,WAASD,MACZ,yBAAG,WAASC,SAHPF,IAFD,MAYfhB,IAAW,uBAAG,eACdE,IAAS,uBAAG,uBAGlB,EAED,YAEAN,EAAOuB,WAAa,CAClBH,GAAII,IAAAA,OAAAA,WACJC,KAAMD,IAAAA,OAAAA,WACNE,UAAWF,IAAAA,OAAAA,W,yLClEPG,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAgB,mCAAG,+GAELL,EAASM,IAAT,oBAFK,uBAEpBC,EAFoB,EAEpBA,KAFoB,kBAGrBA,GAHqB,gCAK5BC,QAAQC,IAAR,MAL4B,yDAAH,qDAShBC,EAAc,mCAAG,WAAMC,GAAN,yFACLX,EAASM,IAAT,eAA6B,CAClDH,OAAQ,CACNS,MAAM,GAAD,OAAKD,MAHc,uBACpBJ,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,sDASdM,EAAY,mCAAG,WAAMpB,GAAN,kGAEDO,EAASM,IAAT,iBAAuBb,IAFtB,uBAEhBc,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,gCAKxBC,QAAQC,IAAR,MALwB,yDAAH,sDASZK,EAAgB,mCAAG,WAAMrB,GAAN,kGAELO,EAASM,IAAT,iBAAuBb,EAAvB,aAFK,uBAEpBc,EAFoB,EAEpBA,KAFoB,kBAGrBA,GAHqB,gCAK5BC,QAAQC,IAAR,MAL4B,yDAAH,sDAShBxB,EAAkB,mCAAG,WAAMQ,GAAN,kGAEPO,EAASM,IAAT,iBAAuBb,EAAvB,aAFO,uBAEtBc,EAFsB,EAEtBA,KAFsB,kBAGvBA,GAHuB,gCAK9BC,QAAQC,IAAR,MAL8B,yDAAH,qD","sources":["components/Review.js","servises/Api.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getMovieReviewById } from '../servises/Api';\n\nconst Review = () => {\n  const [review, setReview] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    const fetchReview = async () => {\n      try {\n        const resp = await getMovieReviewById(movieId);\n        setReview(resp.results);\n        setLoading(true);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchReview();\n  }, [movieId]);\n\n  return (\n    <>\n      {review.length === 0 && (\n        <>\n          <p> Unfortunately, we have no information</p>\n          <img\n            src=\"http://surl.li/fqulq\"\n            alt=\"Not found hage\"\n            width={400}\n          ></img>\n        </>\n      )}\n      {review && (\n        <ul>\n          {review.map(({ id, author, content }) => (\n            <>\n              <li key={id}>\n                <div>\n                  <p> Autor: {author}</p>\n                  <p>Review: {content}</p>\n                </div>\n              </li>\n            </>\n          ))}\n        </ul>\n      )}\n      {loading && <p>...Loading</p>}\n      {error && <p>Review load fail</p>}\n    </>\n  );\n};\n\nexport default Review;\n\nReview.protoTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  character: PropTypes.number.isRequired,\n};\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'af7806c242ad95763370aa39444155c5',\n  },\n});\n\nexport const getTrendingMovie = async () => {\n  try {\n    const { data } = await instance.get(`trending/all/day`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getSearchMovie = async search => {\n  const { data } = await instance.get(`search/movie`, {\n    params: {\n      query: `${search}`,\n    },\n  });\n  return data;\n};\n\nexport const getMovieById = async id => {\n  try {\n    const { data } = await instance.get(`/movie/${id}`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieCastById = async id => {\n  try {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieReviewById = async id => {\n  try {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["Review","useState","review","setReview","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchReview","getMovieReviewById","resp","results","length","src","alt","width","map","id","author","content","protoTypes","PropTypes","name","character","instance","axios","baseURL","params","api_key","getTrendingMovie","get","data","console","log","getSearchMovie","search","query","getMovieById","getMovieCastById"],"sourceRoot":""}